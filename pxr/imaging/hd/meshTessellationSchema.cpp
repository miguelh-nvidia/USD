//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/meshTessellationSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdMeshTessellationSchemaTokens,
    HD_MESH_TESSELLATION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdSizetDataSourceHandle
HdMeshTessellationSchema::GetFaceIndex()
{
    return _GetTypedDataSource<HdSizetDataSource>(
        HdMeshTessellationSchemaTokens->faceIndex);
}

HdIntArrayDataSourceHandle
HdMeshTessellationSchema::GetCounts()
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdMeshTessellationSchemaTokens->counts);
}

HdIntArrayDataSourceHandle
HdMeshTessellationSchema::GetIndices()
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdMeshTessellationSchemaTokens->indices);
}

/*static*/
HdContainerDataSourceHandle
HdMeshTessellationSchema::BuildRetained(
        const HdSizetDataSourceHandle &faceIndex,
        const HdIntArrayDataSourceHandle &counts,
        const HdIntArrayDataSourceHandle &indices
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;

    if (faceIndex) {
        _names[_count] = HdMeshTessellationSchemaTokens->faceIndex;
        _values[_count++] = faceIndex;
    }

    if (counts) {
        _names[_count] = HdMeshTessellationSchemaTokens->counts;
        _values[_count++] = counts;
    }

    if (indices) {
        _names[_count] = HdMeshTessellationSchemaTokens->indices;
        _values[_count++] = indices;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdMeshTessellationSchema::Builder &
HdMeshTessellationSchema::Builder::SetFaceIndex(
    const HdSizetDataSourceHandle &faceIndex)
{
    _faceIndex = faceIndex;
    return *this;
}

HdMeshTessellationSchema::Builder &
HdMeshTessellationSchema::Builder::SetCounts(
    const HdIntArrayDataSourceHandle &counts)
{
    _counts = counts;
    return *this;
}

HdMeshTessellationSchema::Builder &
HdMeshTessellationSchema::Builder::SetIndices(
    const HdIntArrayDataSourceHandle &indices)
{
    _indices = indices;
    return *this;
}

HdContainerDataSourceHandle
HdMeshTessellationSchema::Builder::Build()
{
    return HdMeshTessellationSchema::BuildRetained(
        _faceIndex,
        _counts,
        _indices
    );
} 

PXR_NAMESPACE_CLOSE_SCOPE