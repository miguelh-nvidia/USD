//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/meshTessellationsSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdMeshTessellationsSchemaTokens,
    HD_MESH_TESSELLATIONS_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdIntArrayDataSourceHandle
HdMeshTessellationsSchema::GetFaceIndices()
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdMeshTessellationsSchemaTokens->faceIndices);
}

HdIntArrayDataSourceHandle
HdMeshTessellationsSchema::GetFaceTessellations()
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdMeshTessellationsSchemaTokens->faceTessellations);
}

HdIntArrayDataSourceHandle
HdMeshTessellationsSchema::GetTessellationVertexCounts()
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdMeshTessellationsSchemaTokens->tessellationVertexCounts);
}

HdIntArrayDataSourceHandle
HdMeshTessellationsSchema::GetTessellationVertexIndices()
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdMeshTessellationsSchemaTokens->tessellationVertexIndices);
}

/*static*/
HdContainerDataSourceHandle
HdMeshTessellationsSchema::BuildRetained(
        const HdIntArrayDataSourceHandle &faceIndices,
        const HdIntArrayDataSourceHandle &faceTessellations,
        const HdIntArrayDataSourceHandle &tessellationVertexCounts,
        const HdIntArrayDataSourceHandle &tessellationVertexIndices
)
{
    TfToken _names[4];
    HdDataSourceBaseHandle _values[4];

    size_t _count = 0;

    if (faceIndices) {
        _names[_count] = HdMeshTessellationsSchemaTokens->faceIndices;
        _values[_count++] = faceIndices;
    }

    if (faceTessellations) {
        _names[_count] = HdMeshTessellationsSchemaTokens->faceTessellations;
        _values[_count++] = faceTessellations;
    }

    if (tessellationVertexCounts) {
        _names[_count] = HdMeshTessellationsSchemaTokens->tessellationVertexCounts;
        _values[_count++] = tessellationVertexCounts;
    }

    if (tessellationVertexIndices) {
        _names[_count] = HdMeshTessellationsSchemaTokens->tessellationVertexIndices;
        _values[_count++] = tessellationVertexIndices;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdMeshTessellationsSchema::Builder &
HdMeshTessellationsSchema::Builder::SetFaceIndices(
    const HdIntArrayDataSourceHandle &faceIndices)
{
    _faceIndices = faceIndices;
    return *this;
}

HdMeshTessellationsSchema::Builder &
HdMeshTessellationsSchema::Builder::SetFaceTessellations(
    const HdIntArrayDataSourceHandle &faceTessellations)
{
    _faceTessellations = faceTessellations;
    return *this;
}

HdMeshTessellationsSchema::Builder &
HdMeshTessellationsSchema::Builder::SetTessellationVertexCounts(
    const HdIntArrayDataSourceHandle &tessellationVertexCounts)
{
    _tessellationVertexCounts = tessellationVertexCounts;
    return *this;
}

HdMeshTessellationsSchema::Builder &
HdMeshTessellationsSchema::Builder::SetTessellationVertexIndices(
    const HdIntArrayDataSourceHandle &tessellationVertexIndices)
{
    _tessellationVertexIndices = tessellationVertexIndices;
    return *this;
}

HdContainerDataSourceHandle
HdMeshTessellationsSchema::Builder::Build()
{
    return HdMeshTessellationsSchema::BuildRetained(
        _faceIndices,
        _faceTessellations,
        _tessellationVertexCounts,
        _tessellationVertexIndices
    );
}

/*static*/
HdMeshTessellationsSchema
HdMeshTessellationsSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdMeshTessellationsSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdMeshTessellationsSchemaTokens->tessellations))
        : nullptr);
}

/*static*/
const TfToken &
HdMeshTessellationsSchema::GetSchemaToken()
{
    return HdMeshTessellationsSchemaTokens->tessellations;
} 

PXR_NAMESPACE_CLOSE_SCOPE